#!/bin/bash
# Author: Jake Nagle
# Description:
# Menu created for user interaction by the creation and removal of reports within the record system.

# using -n so the trailing line added to the line above
echo -n "What is you name? "
read name

echo "Welcome $name, what would you like to do?"

PS3='Please enter choice: '
options=("Add Record" "Search Records" "Remove Records" "Generate Report" "Quit")
  select opt in "${options[@]}"
  do
     case $opt in
        1|"Add Record")
                   echo "you chose to add a new record"

        # Adding validation to ID ensuring only 3 digits are entered
                   echo -n 'Enter attendees registration ID: '
                   read id
                    if [ $id -ne "..." ]; then
                   echo "Invalid entry please enter id with 3 digits"
                   break
                else
                   echo "Registration ID added"
                fi
                   echo -n 'Enter attendees first name: '
                   read firstName
                   echo -n 'Enter attendees last name: '
                   read lastName
                   echo -n 'Enter the company the attendee works for: '
                   read company
                   echo -n 'Enter the which department of the company the attendee works in: '
                   read department
                   echo -n 'Enter the attendees phone number: '
                   read phoneNo
                   echo -n 'Enter the attendees email address: '
                   read emailAddress
                   echo "- - - - - - - - - - - - - -- - - - - - Entered Data - - - - - - - - - - - - - - - - - - - -"
                   echo  "$id" "$firstName" "$lastName" "$company" "$department" "$phoneNo" "$emailAddress"
                   echo "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"


# Asking the user if their input is correct and if y or Y is given, sending the new record to the business.txt file using
# double redirection arrows so as to not overwrite any current data
              echo 'Are these the correct details you want to add [y/n]? '
              read answer


            if [[ "$answer" == "y" || "$answer" == "Y" ]]
           then
              echo "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
              echo "$id" "$firstName" "$lastName" "$company" "$department" "$phoneNo" "$emailAddress" "added sucessfully"
              echo "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
              echo "$id" "$firstName" "$lastName" "$company" "$department" "$phoneNo" "$emailAddress" >> business.txt
           else
              echo "Contact has not been added"
           fi
            ;;
        "Search Records")
           echo "you chose to search for record(s)"

                echo -e  "\nSelect what you want to search for by entering a last word given in options: "
                echo "1) Search for a name"
                echo "2) Search for a ID"
                read INPUT
                if [[ "$INPUT" = name || "$INPUT" = Name ]]; then
                       awk '{print $2,$3}' business.txt
                elif [[ "$INPUT" = ID || "$INPUT" = id ]]; then
                       awk '(length($1) == 3){print $1}' business.txt # print length of first column with 3 chars
                fi
           ;;
        "Remove Records")
                    echo "You chose to remove records(s)"

         #Showing the user the current file before they choose to remove any records
            echo -e "\nWould you like to see the current file before removing any records [y/n]? "
            read ANS

           if [[ $ANS = "y" || $ANS = "Y" ]]; then
             grep '[0-9]..' business.txt

             echo -e  "\nPlease enter a word from the line number you want to remove: "
             read word
        # Using with d notation to delete any line in which users word and line word match
                sed /$word/d business.txt; echo -e "\nline removed successfully"
              echo "See updated file...."
            else
            echo -e "\nno problem.. please continue"

            echo -e  "\nPlease enter a word from the line number you want to remove: "
             read wordTwo
        # Using with d notation to delete any line in which users word and line word match
              sed /$wordTwo/d business.txt; echo "line removed successfully"

              echo "See updated file...."
             fi
           ;;
        "Generate Report")
            echo "You chose to genrate records"

        # Giving user options to enter to generate a report on
            echo -e "\nSee options"
            echo "1) View attendees"
                read input
                if [[ $input = "view attendees" || $input = "View Attendees" ]]; then
        # using grep 0-9 followed by 2 periods as I know this will return the 3 digit ID and grep will give back
        # the entire line
                 grep '[0-9]..' business.txt
                else
                 echo "Next"
               fi
           ;;
        "Quit")
            echo "You chose to quit... goodbye!"
            sleep 1
           break
           ;;
        *)
         echo "invalid option $REPLY";;
     esac
  done
done